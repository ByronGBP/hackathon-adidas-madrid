{"dependencies":[{"name":"/Users/elvingomez/3lv27/hackathons/Mad/posenet/demos/package.json","includedInParent":true,"mtime":1525707475000},{"name":"/Users/elvingomez/3lv27/hackathons/Mad/posenet/demos/.babelrc","includedInParent":true,"mtime":1525707475000},{"name":"/Users/elvingomez/3lv27/hackathons/Mad/posenet/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1524539866000}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LRNProgram = (function () {\n    function LRNProgram(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        var rad = radius;\n        var maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        var powOperator;\n        var basis = \"float(\" + bias + \") + float(\" + alpha + \") * sum\";\n        if (beta === 0.5) {\n            powOperator = \"inversesqrt(\" + basis + \")\";\n        }\n        else if (beta === 1.0) {\n            powOperator = \"1.0/(\" + basis + \")\";\n        }\n        else {\n            powOperator = \"exp(log(\" + basis + \") * float(-\" + beta + \"));\";\n        }\n        this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -\" + rad + \"; j <= \" + rad + \"; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  \" + maxD + \") {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * \" + powOperator + \";\\n        setOutput(val);\\n      }\\n    \";\n    }\n    return LRNProgram;\n}());\nexports.LRNProgram = LRNProgram;\n","map":{"mappings":[{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}}],"sources":{"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LRNProgram = (function () {\n    function LRNProgram(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        var rad = radius;\n        var maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        var powOperator;\n        var basis = \"float(\" + bias + \") + float(\" + alpha + \") * sum\";\n        if (beta === 0.5) {\n            powOperator = \"inversesqrt(\" + basis + \")\";\n        }\n        else if (beta === 1.0) {\n            powOperator = \"1.0/(\" + basis + \")\";\n        }\n        else {\n            powOperator = \"exp(log(\" + basis + \") * float(-\" + beta + \"));\";\n        }\n        this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -\" + rad + \"; j <= \" + rad + \"; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  \" + maxD + \") {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * \" + powOperator + \";\\n        setOutput(val);\\n      }\\n    \";\n    }\n    return LRNProgram;\n}());\nexports.LRNProgram = LRNProgram;\n"},"lineCount":26}},"hash":"a529cff308a55acb35ce5a0f1d448b91","cacheData":{"env":{}}}