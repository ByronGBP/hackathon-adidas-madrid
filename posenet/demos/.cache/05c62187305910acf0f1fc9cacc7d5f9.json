{"dependencies":[{"name":"/Users/elvingomez/3lv27/hackathons/Mad/posenet/demos/package.json","includedInParent":true,"mtime":1525707475000},{"name":"/Users/elvingomez/3lv27/hackathons/Mad/posenet/demos/.babelrc","includedInParent":true,"mtime":1525707475000},{"name":"/Users/elvingomez/3lv27/hackathons/Mad/posenet/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1524539866000}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ResizeNearestNeighborProgram = (function () {\n    function ResizeNearestNeighborProgram(inputShape, newHeight, newWidth, alignCorners) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        var batch = inputShape[0], oldHeight = inputShape[1], oldWidth = inputShape[2], depth = inputShape[3];\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        var effectiveInSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];\n        var effectiveOutSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];\n        this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \" + effectiveInSize[0] / effectiveOutSize[0] + \",\\n          \" + effectiveInSize[1] / effectiveOutSize[1] + \");\\n      const vec2 inputShapeRC = vec2(\" + oldHeight + \".0, \" + oldWidth + \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + 0.5)));\\n\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \";\n    }\n    return ResizeNearestNeighborProgram;\n}());\nexports.ResizeNearestNeighborProgram = ResizeNearestNeighborProgram;\n","map":{"mappings":[{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}}],"sources":{"../node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_nearest_neighbor_gpu.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ResizeNearestNeighborProgram = (function () {\n    function ResizeNearestNeighborProgram(inputShape, newHeight, newWidth, alignCorners) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        var batch = inputShape[0], oldHeight = inputShape[1], oldWidth = inputShape[2], depth = inputShape[3];\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        var effectiveInSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];\n        var effectiveOutSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];\n        this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \" + effectiveInSize[0] / effectiveOutSize[0] + \",\\n          \" + effectiveInSize[1] / effectiveOutSize[1] + \");\\n      const vec2 inputShapeRC = vec2(\" + oldHeight + \".0, \" + oldWidth + \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + 0.5)));\\n\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \";\n    }\n    return ResizeNearestNeighborProgram;\n}());\nexports.ResizeNearestNeighborProgram = ResizeNearestNeighborProgram;\n"},"lineCount":16}},"hash":"729426ad05dea430277a05c660dfe1a9","cacheData":{"env":{}}}