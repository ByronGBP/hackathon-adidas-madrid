{"dependencies":[{"name":"/Users/elvingomez/3lv27/hackathons/Mad/posenet/demos/package.json","includedInParent":true,"mtime":1525707475000},{"name":"/Users/elvingomez/3lv27/hackathons/Mad/posenet/demos/.babelrc","includedInParent":true,"mtime":1525707475000},{"name":"/Users/elvingomez/3lv27/hackathons/Mad/posenet/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1524539866000},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./array_ops","loc":{"line":12,"column":26}},{"name":"./broadcast_util","loc":{"line":13,"column":31}},{"name":"./operation","loc":{"line":14,"column":26}},{"name":"./ops","loc":{"line":15,"column":20}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar array_ops_1 = require(\"./array_ops\");\nvar broadcast_util_1 = require(\"./broadcast_util\");\nvar operation_1 = require(\"./operation\");\nvar ops_1 = require(\"./ops\");\nvar BatchNormOps = (function () {\n    function BatchNormOps() {\n    }\n    BatchNormOps.batchNormalization2d = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\n        util.assert(x.rank === 2, \"Error in batchNormalization3D: x must be rank 3 but got rank \" +\n            (x.rank + \".\"));\n        util.assert(mean.rank === 2 || mean.rank === 1, \"Error in batchNormalization2D: mean must be rank 2 or rank 1 but \" +\n            (\"got rank \" + mean.rank + \".\"));\n        util.assert(variance.rank === 2 || variance.rank === 1, \"Error in batchNormalization2D: variance must be rank 2 or rank 1 \" +\n            (\"but got rank \" + variance.rank + \".\"));\n        if (scale != null) {\n            util.assert(scale.rank === 2 || scale.rank === 1, \"Error in batchNormalization2D: scale must be rank 2 or rank 1 \" +\n                (\"but got rank \" + scale.rank + \".\"));\n        }\n        if (offset != null) {\n            util.assert(offset.rank === 2 || offset.rank === 1, \"Error in batchNormalization2D: offset must be rank 2 or rank 1 \" +\n                (\"but got rank \" + offset.rank + \".\"));\n        }\n        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\n    };\n    BatchNormOps.batchNormalization3d = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\n        util.assert(x.rank === 3, \"Error in batchNormalization3D: x must be rank 3 but got rank \" +\n            (x.rank + \".\"));\n        util.assert(mean.rank === 3 || mean.rank === 1, \"Error in batchNormalization3D: mean must be rank 3 or rank 1 but \" +\n            (\"got rank \" + mean.rank + \".\"));\n        util.assert(variance.rank === 3 || variance.rank === 1, \"Error in batchNormalization3D: variance must be rank 3 or rank 1 \" +\n            (\"but got rank \" + variance.rank + \".\"));\n        if (scale != null) {\n            util.assert(scale.rank === 3 || scale.rank === 1, \"Error in batchNormalization3D: scale must be rank 3 or rank 1 \" +\n                (\"but got rank \" + scale.rank + \".\"));\n        }\n        if (offset != null) {\n            util.assert(offset.rank === 3 || offset.rank === 1, \"Error in batchNormalization3D: offset must be rank 3 or rank 1 \" +\n                (\"but got rank \" + offset.rank + \".\"));\n        }\n        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\n    };\n    BatchNormOps.batchNormalization4d = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\n        util.assert(x.rank === 4, \"Error in batchNormalization4D: x must be rank 4 but got rank \" +\n            (x.rank + \".\"));\n        util.assert(mean.rank === 4 || mean.rank === 1, \"Error in batchNormalization4D: mean must be rank 4 or rank 1 but \" +\n            (\"got rank \" + mean.rank + \".\"));\n        util.assert(variance.rank === 4 || variance.rank === 1, \"Error in batchNormalization4D: variance must be rank 4 or rank 1 \" +\n            (\"but got rank \" + variance.rank + \".\"));\n        if (scale != null) {\n            util.assert(scale.rank === 4 || scale.rank === 1, \"Error in batchNormalization4D: scale must be rank 4 or rank 1 \" +\n                (\"but got rank \" + scale.rank + \".\"));\n        }\n        if (offset != null) {\n            util.assert(offset.rank === 4 || offset.rank === 1, \"Error in batchNormalization4D: offset must be rank 4 or rank 1 \" +\n                (\"but got rank \" + offset.rank + \".\"));\n        }\n        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\n    };\n    BatchNormOps.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\n        util.assertArgumentsAreTensors({ x: x, mean: mean, variance: variance }, 'batchNormalization');\n        if (scale != null) {\n            util.assertArgumentsAreTensors({ scale: scale }, 'batchNormalization');\n        }\n        if (offset != null) {\n            util.assertArgumentsAreTensors({ offset: offset }, 'batchNormalization');\n        }\n        util.assert(mean.rank === variance.rank, 'Batch normalization gradient requires mean and variance to have ' +\n            'equal ranks.');\n        util.assert(offset == null || mean.rank === offset.rank, 'Batch normalization gradient requires mean and offset to have ' +\n            'equal ranks.');\n        util.assert(scale == null || mean.rank === scale.rank, 'Batch normalization gradient requires mean and scale to have ' +\n            'equal ranks.');\n        var x4D;\n        if (x.rank === 0 || x.rank === 1) {\n            x4D = x.as4D(1, 1, 1, x.size);\n        }\n        else if (x.rank === 2) {\n            x4D = x.as4D(1, 1, x.shape[0], x.shape[1]);\n        }\n        else if (x.rank === 3) {\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        else {\n            x4D = x;\n        }\n        var der = function (dy) {\n            var scaleValue = scale == null ? array_ops_1.ArrayOps.scalar(1) : scale;\n            var reductionAxes = broadcast_util_1.getReductionAxes(mean.shape, x4D.shape);\n            var tileShape = [];\n            if (mean.rank === 1) {\n                for (var i = 0; i < x4D.shape.length - 1; ++i) {\n                    tileShape.push(x4D.shape[i]);\n                }\n                tileShape.push(1);\n            }\n            var xMinusMean = x.sub(mean);\n            var dyTimesScaleValue = dy.mul(scaleValue);\n            var oneOverSqrtVariance = ops_1.rsqrt(variance.add(array_ops_1.ArrayOps.scalar(varianceEpsilon)));\n            var minusHalfRCube = oneOverSqrtVariance.mul(oneOverSqrtVariance)\n                .mul(oneOverSqrtVariance)\n                .mul(array_ops_1.ArrayOps.scalar(-0.5));\n            var derX = function () {\n                if (mean.rank === 1) {\n                    return dy\n                        .mul(array_ops_1.ArrayOps.tile(oneOverSqrtVariance.as4D(1, 1, 1, mean.shape[0]), tileShape))\n                        .mul(scaleValue)\n                        .reshape(x.shape);\n                }\n                else {\n                    return dy.mul(oneOverSqrtVariance).mul(scaleValue).reshape(x.shape);\n                }\n            };\n            var derMean = function () {\n                var meanDer = oneOverSqrtVariance.mul(array_ops_1.ArrayOps.scalar(-1)).mul(dyTimesScaleValue);\n                if (mean.rank === 1) {\n                    meanDer = meanDer.sum(reductionAxes);\n                }\n                return meanDer.reshape(mean.shape);\n            };\n            var derVariance = function () {\n                var varianceDer = minusHalfRCube.mul(xMinusMean).mul(dyTimesScaleValue);\n                if (mean.rank === 1) {\n                    varianceDer = varianceDer.sum(reductionAxes);\n                }\n                return varianceDer.reshape(mean.shape);\n            };\n            var derScale = function () {\n                var xMinusMean2TimesRsqrt = xMinusMean.mul(oneOverSqrtVariance);\n                var scaleDer = dy.mul(xMinusMean2TimesRsqrt);\n                if (mean.rank === 1) {\n                    scaleDer = scaleDer.sum(reductionAxes);\n                }\n                return scaleDer.reshape(mean.shape);\n            };\n            var derOffset = function () {\n                var offsetDer = dy;\n                if (mean.rank === 1) {\n                    offsetDer = offsetDer.sum(reductionAxes);\n                }\n                return offsetDer.reshape(mean.shape);\n            };\n            return {\n                x: derX,\n                mean: derMean,\n                variance: derVariance,\n                scale: derScale,\n                offset: derOffset\n            };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.batchNormalization(x4D, batchnormReshape4D(mean), batchnormReshape4D(variance), varianceEpsilon, batchnormReshape4D(scale), batchnormReshape4D(offset)); }, { x: x, mean: mean, variance: variance, scale: scale, offset: offset }, der);\n        return res.reshape(x.shape);\n    };\n    __decorate([\n        operation_1.operation\n    ], BatchNormOps, \"batchNormalization2d\", null);\n    __decorate([\n        operation_1.operation\n    ], BatchNormOps, \"batchNormalization3d\", null);\n    __decorate([\n        operation_1.operation\n    ], BatchNormOps, \"batchNormalization4d\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Normalization' })\n    ], BatchNormOps, \"batchNormalization\", null);\n    return BatchNormOps;\n}());\nexports.BatchNormOps = BatchNormOps;\nfunction batchnormReshape4D(x) {\n    if (x == null) {\n        return null;\n    }\n    if (x.rank === 0) {\n        return x.as1D();\n    }\n    else if (x.rank === 1) {\n        return x;\n    }\n    else if (x.rank === 2) {\n        return x.as4D(1, 1, x.shape[0], x.shape[1]);\n    }\n    else if (x.rank === 3) {\n        return x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n    }\n    return x;\n}\n","map":{"mappings":[{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}}],"sources":{"../node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar array_ops_1 = require(\"./array_ops\");\nvar broadcast_util_1 = require(\"./broadcast_util\");\nvar operation_1 = require(\"./operation\");\nvar ops_1 = require(\"./ops\");\nvar BatchNormOps = (function () {\n    function BatchNormOps() {\n    }\n    BatchNormOps.batchNormalization2d = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\n        util.assert(x.rank === 2, \"Error in batchNormalization3D: x must be rank 3 but got rank \" +\n            (x.rank + \".\"));\n        util.assert(mean.rank === 2 || mean.rank === 1, \"Error in batchNormalization2D: mean must be rank 2 or rank 1 but \" +\n            (\"got rank \" + mean.rank + \".\"));\n        util.assert(variance.rank === 2 || variance.rank === 1, \"Error in batchNormalization2D: variance must be rank 2 or rank 1 \" +\n            (\"but got rank \" + variance.rank + \".\"));\n        if (scale != null) {\n            util.assert(scale.rank === 2 || scale.rank === 1, \"Error in batchNormalization2D: scale must be rank 2 or rank 1 \" +\n                (\"but got rank \" + scale.rank + \".\"));\n        }\n        if (offset != null) {\n            util.assert(offset.rank === 2 || offset.rank === 1, \"Error in batchNormalization2D: offset must be rank 2 or rank 1 \" +\n                (\"but got rank \" + offset.rank + \".\"));\n        }\n        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\n    };\n    BatchNormOps.batchNormalization3d = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\n        util.assert(x.rank === 3, \"Error in batchNormalization3D: x must be rank 3 but got rank \" +\n            (x.rank + \".\"));\n        util.assert(mean.rank === 3 || mean.rank === 1, \"Error in batchNormalization3D: mean must be rank 3 or rank 1 but \" +\n            (\"got rank \" + mean.rank + \".\"));\n        util.assert(variance.rank === 3 || variance.rank === 1, \"Error in batchNormalization3D: variance must be rank 3 or rank 1 \" +\n            (\"but got rank \" + variance.rank + \".\"));\n        if (scale != null) {\n            util.assert(scale.rank === 3 || scale.rank === 1, \"Error in batchNormalization3D: scale must be rank 3 or rank 1 \" +\n                (\"but got rank \" + scale.rank + \".\"));\n        }\n        if (offset != null) {\n            util.assert(offset.rank === 3 || offset.rank === 1, \"Error in batchNormalization3D: offset must be rank 3 or rank 1 \" +\n                (\"but got rank \" + offset.rank + \".\"));\n        }\n        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\n    };\n    BatchNormOps.batchNormalization4d = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\n        util.assert(x.rank === 4, \"Error in batchNormalization4D: x must be rank 4 but got rank \" +\n            (x.rank + \".\"));\n        util.assert(mean.rank === 4 || mean.rank === 1, \"Error in batchNormalization4D: mean must be rank 4 or rank 1 but \" +\n            (\"got rank \" + mean.rank + \".\"));\n        util.assert(variance.rank === 4 || variance.rank === 1, \"Error in batchNormalization4D: variance must be rank 4 or rank 1 \" +\n            (\"but got rank \" + variance.rank + \".\"));\n        if (scale != null) {\n            util.assert(scale.rank === 4 || scale.rank === 1, \"Error in batchNormalization4D: scale must be rank 4 or rank 1 \" +\n                (\"but got rank \" + scale.rank + \".\"));\n        }\n        if (offset != null) {\n            util.assert(offset.rank === 4 || offset.rank === 1, \"Error in batchNormalization4D: offset must be rank 4 or rank 1 \" +\n                (\"but got rank \" + offset.rank + \".\"));\n        }\n        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\n    };\n    BatchNormOps.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) { varianceEpsilon = .001; }\n        util.assertArgumentsAreTensors({ x: x, mean: mean, variance: variance }, 'batchNormalization');\n        if (scale != null) {\n            util.assertArgumentsAreTensors({ scale: scale }, 'batchNormalization');\n        }\n        if (offset != null) {\n            util.assertArgumentsAreTensors({ offset: offset }, 'batchNormalization');\n        }\n        util.assert(mean.rank === variance.rank, 'Batch normalization gradient requires mean and variance to have ' +\n            'equal ranks.');\n        util.assert(offset == null || mean.rank === offset.rank, 'Batch normalization gradient requires mean and offset to have ' +\n            'equal ranks.');\n        util.assert(scale == null || mean.rank === scale.rank, 'Batch normalization gradient requires mean and scale to have ' +\n            'equal ranks.');\n        var x4D;\n        if (x.rank === 0 || x.rank === 1) {\n            x4D = x.as4D(1, 1, 1, x.size);\n        }\n        else if (x.rank === 2) {\n            x4D = x.as4D(1, 1, x.shape[0], x.shape[1]);\n        }\n        else if (x.rank === 3) {\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        else {\n            x4D = x;\n        }\n        var der = function (dy) {\n            var scaleValue = scale == null ? array_ops_1.ArrayOps.scalar(1) : scale;\n            var reductionAxes = broadcast_util_1.getReductionAxes(mean.shape, x4D.shape);\n            var tileShape = [];\n            if (mean.rank === 1) {\n                for (var i = 0; i < x4D.shape.length - 1; ++i) {\n                    tileShape.push(x4D.shape[i]);\n                }\n                tileShape.push(1);\n            }\n            var xMinusMean = x.sub(mean);\n            var dyTimesScaleValue = dy.mul(scaleValue);\n            var oneOverSqrtVariance = ops_1.rsqrt(variance.add(array_ops_1.ArrayOps.scalar(varianceEpsilon)));\n            var minusHalfRCube = oneOverSqrtVariance.mul(oneOverSqrtVariance)\n                .mul(oneOverSqrtVariance)\n                .mul(array_ops_1.ArrayOps.scalar(-0.5));\n            var derX = function () {\n                if (mean.rank === 1) {\n                    return dy\n                        .mul(array_ops_1.ArrayOps.tile(oneOverSqrtVariance.as4D(1, 1, 1, mean.shape[0]), tileShape))\n                        .mul(scaleValue)\n                        .reshape(x.shape);\n                }\n                else {\n                    return dy.mul(oneOverSqrtVariance).mul(scaleValue).reshape(x.shape);\n                }\n            };\n            var derMean = function () {\n                var meanDer = oneOverSqrtVariance.mul(array_ops_1.ArrayOps.scalar(-1)).mul(dyTimesScaleValue);\n                if (mean.rank === 1) {\n                    meanDer = meanDer.sum(reductionAxes);\n                }\n                return meanDer.reshape(mean.shape);\n            };\n            var derVariance = function () {\n                var varianceDer = minusHalfRCube.mul(xMinusMean).mul(dyTimesScaleValue);\n                if (mean.rank === 1) {\n                    varianceDer = varianceDer.sum(reductionAxes);\n                }\n                return varianceDer.reshape(mean.shape);\n            };\n            var derScale = function () {\n                var xMinusMean2TimesRsqrt = xMinusMean.mul(oneOverSqrtVariance);\n                var scaleDer = dy.mul(xMinusMean2TimesRsqrt);\n                if (mean.rank === 1) {\n                    scaleDer = scaleDer.sum(reductionAxes);\n                }\n                return scaleDer.reshape(mean.shape);\n            };\n            var derOffset = function () {\n                var offsetDer = dy;\n                if (mean.rank === 1) {\n                    offsetDer = offsetDer.sum(reductionAxes);\n                }\n                return offsetDer.reshape(mean.shape);\n            };\n            return {\n                x: derX,\n                mean: derMean,\n                variance: derVariance,\n                scale: derScale,\n                offset: derOffset\n            };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend) { return backend.batchNormalization(x4D, batchnormReshape4D(mean), batchnormReshape4D(variance), varianceEpsilon, batchnormReshape4D(scale), batchnormReshape4D(offset)); }, { x: x, mean: mean, variance: variance, scale: scale, offset: offset }, der);\n        return res.reshape(x.shape);\n    };\n    __decorate([\n        operation_1.operation\n    ], BatchNormOps, \"batchNormalization2d\", null);\n    __decorate([\n        operation_1.operation\n    ], BatchNormOps, \"batchNormalization3d\", null);\n    __decorate([\n        operation_1.operation\n    ], BatchNormOps, \"batchNormalization4d\", null);\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Normalization' })\n    ], BatchNormOps, \"batchNormalization\", null);\n    return BatchNormOps;\n}());\nexports.BatchNormOps = BatchNormOps;\nfunction batchnormReshape4D(x) {\n    if (x == null) {\n        return null;\n    }\n    if (x.rank === 0) {\n        return x.as1D();\n    }\n    else if (x.rank === 1) {\n        return x;\n    }\n    else if (x.rank === 2) {\n        return x.as4D(1, 1, x.shape[0], x.shape[1]);\n    }\n    else if (x.rank === 3) {\n        return x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n    }\n    return x;\n}\n"},"lineCount":201}},"hash":"a2c0382ee30462037290d4fbbd360ede","cacheData":{"env":{}}}